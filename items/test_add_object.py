
import pytest

from tests.utils.test_application_utils import add_object, get_all_objects, update_object, delete_object


@pytest.mark.parametrize("name,year,price,cpu_model, hard_disk_size", [("", 2023, 50000, "Intel Core i9", "1Tb"),
                                                                       ("sample product", "abcd", 1849.99, "Intel Core i9", "1Tb"),
                                                                       ("sample product", 2023, "Rs $ 123", "Intel Core i9", "1Tb"),
                                                                       ("sample product", 2023, 1849.99, 123456, "1Tb"),
                                                                       ("sample product", 2023, 1849.99, "Intel Core i9", "TB 123")])
def test_add_object_with_various_positive_inputs(name,year,price,cpu_model, hard_disk_size):
    add_object_response = add_object(name, year, price, cpu_model, hard_disk_size)
    assert add_object_response["name"] == name
    assert add_object_response["data"]["year"] == year
    assert add_object_response["data"]["price"] == price
    assert add_object_response["data"]["CPU model"] == cpu_model
    assert add_object_response["data"]["Hard disk size"] == hard_disk_size

@pytest.mark.parametrize("id,name, color, capacity", [("1","Google Pixel 6 Pro","Cloudy White","128 GB"), ("3","Apple iPhone 12 Pro Max","Cloudy White",512)])
def test_get_all_objects_with_positive_inputs(id,name, color, capacity):
    get_all_objects_response = get_all_objects()
    assert len(get_all_objects_response) > 0
    assert get_all_objects_response[int(id)-1]["id"] == id
    assert get_all_objects_response[int(id)-1]["name"] == name
    assert get_all_objects_response[int(id)-1]["data"]["color"] == color
    assert get_all_objects_response[int(id)-1]["data"]["capacity"] == capacity

@pytest.mark.parametrize("name, year, price, cpu_model, hard_disk_size, color", [("1223", 2019, 2049.99, "Intel Core i9", "1 TB", 1234),
                                                                                 ("Apple MacBook Pro 16", "abcd", 2049.99, "Intel Core i9", "1 TB","silver"),
                                                                                 ("Apple MacBook Pro 16", 2019, 2049.99, 56874, "1 TB", "white"),
                                                                                 ("Apple MacBook Pro 16", 2019, "@#$%", "Intel Core i9", "TB 123","black")])
def test_update_object_with_positive_inputs(name, year, price, cpu_model, hard_disk_size, color):
    update_object_response = update_object(name, year, price, cpu_model, hard_disk_size, color)
    # assert update_object_response["name"] == name
    # assert update_object_response["data"]["year"] == year
    # assert update_object_response["data"]["price"] == price
    # assert update_object_response["data"]["CPU model"] == cpu_model
    # assert update_object_response["data"]["Hard disk size"] == hard_disk_size
    # assert update_object_response["data"]["color"] == color
    assert update_object_response["error"] == '7 is a reserved id and the data object of it cannot be overridden. You can create a new object via POST request and use new generated by id from it to send a PUT request.'


def test_delete_object_with_positive_inputs():
    delete_object_response = delete_object()
    assert delete_object_response["error"] == '6 is a reserved id and the data object of it cannot be deleted. You can create your own new object via POST request and try to send a DELETE request with new generated object id.'
